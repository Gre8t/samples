pipeline {
    agent any

    environment {
        BUILD_CONFIGURATION = 'Release'
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build.')
        booleanParam(name: 'SHOULD_PUBLISH', defaultValue: false, description: 'Should the "publish" step run?')
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                checkout([$class: 'GitSCM', branches: [[name: "${BRANCH_NAME}"]], extensions: [], userRemoteConfigs: [[url: 'https://github.com/dotnet/samples.git']]])
            }
        }

        stage('Build') {
            agent any
            steps {
                echo 'Building...'
                sh """
                 sudo apt-get update
                 sudo apt-get install -y apt-transport-https
  		 sudo apt-get update
  		 sudo apt-get install -y dotnet-sdk-7.0
                """
                sh 'dotnet build csharp/unit-testing/UnitTesting.sln --configuration ${BUILD_CONFIGURATION}'
            }
        }

        stage('Tests') {
            parallel {
                stage('NUnit Check') {
                    agent any
                    steps {
                        echo 'NUnit on the running... '
                        sh "dotnet test csharp/unit-testing/NUnit.Library.Tests/NUnit.Library.Tests.csproj"
                        junit '**/TestResults/*.xml' 
                    }
                }
                stage('xUnit Exam') {
                    agent any
                    steps {
                        echo 'Let xUnit examine... '
                        sh "dotnet test csharp/unit-testing/xUnit.Tests/xUnit.Tests.csproj"
                        junit '**/TestResults/*.xml' 
                    }
                }
                stage('MSTest Investigation') {
                    agent any
                    steps {
                        echo 'Running MSTest...'
                        // Retry mechanism for robustness
                        retry(2) {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "dotnet test csharp/unit-testing/MSTest.UnitTests/MSTest.UnitTests.csproj"
                            }
                        }
                        junit '**/TestResults/*.trx'
                    }
                }
            }
        }           

        stage('Approval') {
            steps {
                script {
                    // Send a Slack notification for approval                    
                    slackSend(
                        channel: "#deployments",
                        message: "Deployment of build #${currentBuild.number} is awaiting approval.",
                        attachments: [ 
                            [ 
                                "fallback": "Deployment approval required",
                                "color": "warning",
                                "callback_id": "deploy_approval_${currentBuild.number}",
                                "actions": [
                                    [
                                        "name": "approve",
                                        "text": "Approve",
                                        "type": "button",
                                        "value": "approve"
                                    ],
                                    [
                                        "name": "reject",
                                        "text": "Reject",
                                        "type": "button",
                                        "value": "reject"
                                    ]
                                ]
                            ]
                        ]
                    )                  
                    
                    script {
                        def approvalStatus = currentBuild.rawBuild.getEnvironment(listener).get('APPROVAL_STATUS')
                        if(approvalStatus == 'REJECTED') {
                            error('Deployment was rejected!')
                        }
                    }
                }
            }
        }

        stage('Publish') {
            when {
                expression { return params.SHOULD_PUBLISH }
            }
            steps {
                echo 'Publishing...'
                // todo: add a publish version strategy
                sh 'dotnet publish csharp/unit-testing/UnitTesting.sln --configuration ${BUILD_CONFIGURATION} -o ./publish'
                archiveArtifacts artifacts: '**/publish/*', allowEmptyArchive: true
            }
        }

    }

    post {
            always {
            echo 'Cleanup...'
            cleanWs()
            }
             failure {
        // Try to get the user who triggered the build.
        def user
        try {
            user = currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
        } catch (Exception e) {
            echo "Error retrieving user ID: ${e.getMessage()}"
            user = "User" // Default value if user ID cannot be retrieved
        }

        slackSend(
            color: 'danger',
            message: "@${user} - Build Failure for #${currentBuild.number}. Check Jenkins logs."
        )
    }
        }    
}
