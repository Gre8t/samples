pipeline {
    agent any

    environment {
        BUILD_CONFIGURATION = 'Release'
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build.')
        booleanParam(name: 'SHOULD_PUBLISH', defaultValue: false, description: 'Should the "publish" step run?')
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                checkout([$class: 'GitSCM', branches: [[name: "${BRANCH_NAME}"]], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Gre8t/samples']]])
            }
        }

        stage('Build') {
            agent any
            steps {
                echo 'Building...'
                sh """
                 sudo apt-get update
                 sudo apt-get install -y apt-transport-https dotnet-sdk-7.0
                """
                sh 'dotnet build csharp/unit-testing/UnitTesting.sln --configuration ${BUILD_CONFIGURATION}'
            }
        }

        stage('Tests') {
            steps {
                script{
                     parallel(
                "NUnit Check":{
                    agent any
                    steps {
                        echo 'NUnit on the running... '
                        //publish failed test
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "dotnet test csharp/unit-testing/NUnit.Library.Tests/NUnit.Library.Tests.csproj"
                            }
                        junit '**/TestResults/*.xml' 
                    }
                },
                "xUnit check": {
                    agent any
                    steps {
                        echo 'Let xUnit examine... '
                        //publish failed test
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "dotnet test csharp/unit-testing/xUnit.Tests/xUnit.Tests.csproj"
                        }
                        junit '**/TestResults/*.xml' 
                    }
                },
                "MSTest check": {
                    agent any
                    steps {
                        echo 'Running MSTest...'
                        //publish failed test
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "dotnet test csharp/unit-testing/MSTest.UnitTests/MSTest.UnitTests.csproj"
                        }
                        junit '**/TestResults/*.trx'
                    }
                }
            )
            }
        } 
        }          

        

        stage('Publish') {
            when {
                expression { return params.SHOULD_PUBLISH }
            }
            steps {
                script {
                    //install gitversion
                    if (isUnix()) {
                        // Check if it's macOS
                        if (sh(script: 'uname -s | grep Darwin', returnStatus: true) == 0) {
                            sh 'brew install gitversion'
                        } else {  // Assuming it's Linux
                            sh '''
                            wget https://github.com/GitTools/GitVersion/releases/download/5.12.0/gitversion-linux-x64-5.12.0.tar.gz
                            tar xzf gitversion-linux-x64-5.12.0.tar.gz -C /usr/local/bin
                            '''
                        }
                    } else {  // Windows
                        bat 'choco install gitversion.portable -y'
                    }
                    
                    // Using GitVersion to calculate version based on Git history
                    def gitVersionResult = sh(script: 'gitversion /output json', returnStdout: true).trim()
                    def gitVersionData = readJSON text: gitVersionResult
                    env.SEMVER_VERSION = gitVersionData.SemVer
                }
                echo 'Publishing...'
                sh 'dotnet publish csharp/unit-testing/UnitTesting.sln --configuration ${BUILD_CONFIGURATION} -o build-${SEMVER_VERSION}'
                sh 'zip -r build-${SEMVER_VERSION}.zip build-${SEMVER_VERSION}'
                archiveArtifacts artifacts: 'build-${SEMVER_VERSION}.zip', allowEmptyArchive: true
            }
        }

    }

    post {
            always {
            echo 'Cleanup...'
            cleanWs()
            }
             failure {      

            slackSend(
                color: 'danger',
                channel: "#deployments",
                message: "Build Failure for #${currentBuild.number}. Check Jenkins logs."
            )
        }
    }
    

}
