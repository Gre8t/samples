pipeline {
    agent any

    environment {
        BUILD_CONFIGURATION = 'Release'
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build.')
        booleanParam(name: 'SHOULD_PUBLISH', defaultValue: false, description: 'Should the "publish" step run?')
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                checkout([$class: 'GitSCM', branches: [[name: "${BRANCH_NAME}"]], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Gre8t/samples']]])
            }
        }

        stage('Build') {
            agent any
            steps {
                echo 'Building...'
                sh """
                 sudo apt-get update
                 sudo apt-get install -y apt-transport-https dotnet-sdk-7.0
                """
                sh 'dotnet build csharp/unit-testing/UnitTesting.sln --configuration ${BUILD_CONFIGURATION}'
            }
        }

        // stage('Tests') {
        //     steps {
        //         script{
        //              parallel(
        //         "NUnit Check":{
        //             agent any
        //             steps {
        //                 echo 'NUnit on the running... '
        //                 sh "dotnet test csharp/unit-testing/NUnit.Library.Tests/NUnit.Library.Tests.csproj"
        //                 junit '**/TestResults/*.xml' 
        //             }
        //         },
        //         "xUnit Exam": {
        //             agent any
        //             steps {
        //                 echo 'Let xUnit examine... '
        //                 sh "dotnet test csharp/unit-testing/xUnit.Tests/xUnit.Tests.csproj"
        //                 junit '**/TestResults/*.xml' 
        //             }
        //         },
        //         "MSTest Investigation": {
        //             agent any
        //             steps {
        //                 echo 'Running MSTest...'
        //                 // Retry mechanism for robustness
        //                 retry(2) {
        //                     catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        //                         sh "dotnet test csharp/unit-testing/MSTest.UnitTests/MSTest.UnitTests.csproj"
        //                     }
        //                 }
        //                 junit '**/TestResults/*.trx'
        //             }
        //         }
        //     )
        //     }
        // } 
        // }          

        stage('Approval') {
            steps {
                script {
                    // Send a Slack notification for approval                    
                    slackSend(
                        channel: "#deployments",
                        message: "Deployment of build #${currentBuild.number} is awaiting approval.",
                        attachments: [ 
                            [ 
                                "fallback": "Deployment approval required",
                                "color": "warning",
                                "callback_id": "deploy_approval_${currentBuild.number}",
                                "actions": [
                                    [
                                        "name": "approve",
                                        "text": "Approve",
                                        "type": "button",
                                        "value": "approve"
                                    ],
                                    [
                                        "name": "reject",
                                        "text": "Reject",
                                        "type": "button",
                                        "value": "reject"
                                    ]
                                ]
                            ]
                        ]
                    )                  
                    
                    script {
                        def approvalStatus = currentBuild.rawBuild.getEnvironment(listener).get('APPROVAL_STATUS')
                        if(approvalStatus == 'REJECTED') {
                            error('Deployment was rejected!')
                        }
                    }
                }
            }
        }

        stage('Publish') {
            when {
                expression { return params.SHOULD_PUBLISH }
            }
            steps {
                script {
                    // Using GitVersion to calculate version based on Git history
                    def gitVersionResult = sh(script: 'GitVersion /output json', returnStdout: true).trim()
                    def gitVersionData = readJSON text: gitVersionResult
                    env.SEMVER_VERSION = gitVersionData.SemVer
                }
                echo 'Publishing...'
                sh 'dotnet publish csharp/unit-testing/UnitTesting.sln --configuration ${BUILD_CONFIGURATION} -o ${SEMVER_VERSION}'
                sh 'zip -r ${SEMVER_VERSION}.zip ./publish'
                archiveArtifacts artifacts: '${SEMVER_VERSION}.zip', allowEmptyArchive: true
            }
        }

    }

    post {
            always {
            echo 'Cleanup...'
            cleanWs()
            }
             failure {      

            slackSend(
                color: 'danger',
                message: "Build Failure for #${currentBuild.number}. Check Jenkins logs."
            )
        }
    }
    

}
